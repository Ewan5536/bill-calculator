{"version":3,"sources":["Gas.js","Electricity.js","App.js","serviceWorker.js","index.js"],"names":["Gas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","unitsUsed","currentUnit","gasAmount","e","_this2","setState","target","value","console","log","document","getElementsByTagName","_this3","_this$state","react_default","a","createElement","className","type","placeholder","onChange","unitUsed","toFixed","onClick","reset","Component","Electricity","current","electricityAmount","electricityUsed","App","src_Gas","src_Electricity","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9682ce7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Gas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            unitsUsed: 0,\r\n            currentUnit: props.currentUnit,\r\n            gasAmount: 0\r\n\r\n        };\r\n    }\r\n    unitUsed(e) {\r\n        this.setState({ unitsUsed: e.target.value - 11000 }, () => this.gasAmount())\r\n\r\n    }\r\n    gasAmount(e) {\r\n        console.log(this.state.unitsUsed);\r\n        this.setState({ gasAmount: (((100 * 10) + ((this.state.unitsUsed - 50) * 20)) / 100) });\r\n    }\r\n    reset() {\r\n        document.getElementsByTagName('input')[0].value = '';\r\n        this.setState({ gasAmount: 0, unitsUsed: 0, currentUnit: '0'});\r\n     } \r\n    render() {\r\n        let { unitsUsed, currentUnit, gasAmount } = this.state;\r\n        return (\r\n\r\n            <div className='container'>\r\n                <div className='item'>\r\n\r\n                    <label className='heading'>Enter the Gas meter readings: </label>\r\n                    <input\r\n                        type='text' className='border'\r\n                        placeholder={currentUnit}\r\n                        onChange={(e) => this.unitUsed(e)}\r\n                    />\r\n\r\n                    <label className='heading'>The Gas unit used: </label>\r\n                    <label className='border'>\r\n                        {unitsUsed}\r\n                    </label>\r\n\r\n                    <label className='heading'>Gas Bill Amount:  </label>\r\n                    <label className='border'\r\n                        placeholder={gasAmount}\r\n                    >\r\n                        £{gasAmount.toFixed(2)}\r\n                    </label>\r\n                    <div>\r\n                    <button onClick={() => this.reset()}>\r\n                        RESET\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default Gas;","import React, {Component} from 'react';\r\n\r\nclass Electricity extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={unitsUsed: 0,\r\n                    current: props.current,\r\n                    electricityAmount: 0\r\n\r\n        };\r\n    }\r\n    electricityUsed(e){\r\n        this.setState({unitsUsed: e.target.value - 11000}, () => this.electricityAmount())\r\n      \r\n     }\r\n     electricityAmount(e){\r\n         console.log(this.state.unitsUsed);\r\n         this.setState({electricityAmount: (((100 * 10) + ((this.state.unitsUsed - 50) * 20))/100) });\r\n     }\r\n     reset() {\r\n        document.getElementsByTagName('input')[1].value = '';\r\n        this.setState({ electricityAmount: 0, unitsUsed: 0, });\r\n     } \r\n    render() {\r\n        let {unitsUsed, current, electricityAmount} = this.state;\r\n        return(\r\n\r\n            <div className='container'>\r\n                <div className='item'>\r\n                    <label className='heading'>Enter the Electricity meter readings: </label>\r\n                    <input \r\n                        className='border'\r\n                        type='text'\r\n                        placeholder = {current}\r\n                        onChange = {(e) => this.electricityUsed(e)}\r\n                     />\r\n                    <label className='heading'>The Electricity unit used: </label>  \r\n                    <label className='border'>\r\n                        {unitsUsed}\r\n                    </label>\r\n                    <label className='heading'>Electricity Bill Amount:  </label>\r\n                    <label className='border'\r\n                        placeholder = {electricityAmount} \r\n                    >\r\n                        £ {electricityAmount.toFixed(2)}\r\n                    </label>\r\n                <div>\r\n                    <button onClick={() => this.reset()}>\r\n                        RESET\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Electricity;","import React from 'react';\r\nimport Gas from './Gas';\r\nimport './App.css';\r\nimport Electricity from './Electricity';\r\n\r\nfunction App() {\r\n  return(\r\n  <div>\r\n    <div className='header'><h1>BILL CALCULATOR</h1>\r\n    </div>\r\n    <div className='flexitems'>\r\n      <Gas currentUnit={0}></Gas>\r\n      <Electricity current={0}></Electricity>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}